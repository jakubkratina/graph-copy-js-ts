{"version":3,"file":"workspan-1.cjs.production.min.js","sources":["../src/graph.ts","../src/cli/validation.ts","../src/index.ts"],"sourcesContent":["import {Entity, Graph, Link} from \"../interfaces\";\nimport fs from 'fs';\n\nexport const find = (graph: Graph, entityId: number): Entity => {\n    const entity = graph.entities.find(entity => entity.entity_id === entityId);\n\n    if (entity === undefined) {\n        throw new Error(`The entity ${entityId} does not exist.`);\n    }\n\n    return entity;\n};\n\nexport const findInboundLinks = (graph: Graph, entity: Entity): Link[] => {\n    return graph.links.filter(link => link.to === entity.entity_id);\n};\n\nexport const findOutboundLinks = (graph: Graph, entity: Entity): Link[] => {\n    return graph.links.filter(link => link.from === entity.entity_id);\n};\n\nexport const parse = (file: string): Graph => {\n    return JSON.parse(fs.readFileSync(file, 'utf8'));\n};\n\nexport const copy = (graph: &Graph, entityId: number): Graph => {\n    const initial = find(graph, entityId);\n    const initialClone = clone(graph, initial);\n\n    copyInboundLinks(graph, initialClone, initial);\n\n    copyDescendants(graph, initial, initialClone);\n\n    return graph;\n};\n\nconst copyDescendants = (graph: &Graph, entity: Entity, entityClone: Entity): void => {\n    const links = findOutboundLinks(graph, entity);\n\n    if (links.length) {\n        links.forEach(link => {\n            const descendant = find(graph, link.to);\n            const descendantClone = clone(graph, descendant);\n\n            graph.links.push({\n                from: entityClone.entity_id,\n                to: descendantClone.entity_id\n            });\n\n            copyDescendants(graph, descendant, descendantClone);\n        })\n    }\n};\n\nconst copyInboundLinks = (graph: &Graph, entity: Entity, ancestor: Entity) => {\n    findInboundLinks(graph, ancestor).forEach(link => {\n        graph.links.push({\n            from: link.from,\n            to: entity.entity_id\n        });\n    });\n};\n\n// Note: in the production, I'd expect a store/DB call instead of getting the last element from the graph array\nconst generateId = (graph: Graph) => graph.entities[graph.entities.length - 1].entity_id + 1;\n\nconst clone = (graph: &Graph, entity: Entity): Entity => {\n    const clone = {\n        ...entity, ...{\n            entity_id: generateId(graph)\n        }\n    };\n\n    graph.entities.push(clone);\n\n    return clone;\n};\n","import fs from 'fs';\nimport {find, parse} from '../graph';\n\nconst input = (file: string, entity: number) => {\n    if (!fs.existsSync(file)) {\n        throw new Error(`The input file ${file} does not exist.`);\n    }\n\n    let graph = parse(file);\n\n    if (!find(graph, entity)) {\n        throw new Error(`The entity ${entity} does not exist.`);\n    }\n\n    return graph;\n};\n\nexport default input;\n","import yargs from 'yargs';\nimport validation from './cli/validation';\nimport {copy} from './graph';\n\nyargs\n    .usage('Usage: <inputfile> <entityid>')\n    .demandCommand(2);\n\nconst file = yargs.argv._[0];\nconst entityId = parseInt(yargs.argv._[1]);\n\nconst graph = copy(\n    validation(file, entityId), entityId\n);\n\nconsole.log(graph);\n"],"names":["find","graph","entityId","entity","entities","entity_id","undefined","Error","copy","initial","initialClone","clone","copyInboundLinks","copyDescendants","entityClone","links","filter","link","from","findOutboundLinks","length","forEach","descendant","to","descendantClone","push","ancestor","findInboundLinks","generateId","input","file","fs","existsSync","JSON","parse","readFileSync","yargs","usage","demandCommand","argv","_","parseInt","console","log","validation"],"mappings":"+UAGO,IAAMA,EAAO,SAACC,EAAcC,OACzBC,EAASF,EAAMG,SAASJ,KAAK,SAAAG,UAAUA,EAAOE,YAAcH,YAEnDI,IAAXH,QACM,IAAII,oBAAoBL,6BAG3BC,GAeEK,EAAO,SAACP,EAAeC,OAC1BO,EAAUT,EAAKC,EAAOC,GACtBQ,EAAeC,EAAMV,EAAOQ,UAElCG,EAAiBX,EAAOS,EAAcD,GAEtCI,EAAgBZ,EAAOQ,EAASC,GAEzBT,GAGLY,EAAkB,SAAlBA,EAAmBZ,EAAeE,EAAgBW,OAC9CC,EApBuB,SAACd,EAAcE,UACrCF,EAAMc,MAAMC,OAAO,SAAAC,UAAQA,EAAKC,OAASf,EAAOE,YAmBzCc,CAAkBlB,EAAOE,GAEnCY,EAAMK,QACNL,EAAMM,QAAQ,SAAAJ,OACJK,EAAatB,EAAKC,EAAOgB,EAAKM,IAC9BC,EAAkBb,EAAMV,EAAOqB,GAErCrB,EAAMc,MAAMU,KAAK,CACbP,KAAMJ,EAAYT,UAClBkB,GAAIC,EAAgBnB,YAGxBQ,EAAgBZ,EAAOqB,EAAYE,MAKzCZ,EAAmB,SAACX,EAAeE,EAAgBuB,IAzCzB,SAACzB,EAAcE,UACpCF,EAAMc,MAAMC,OAAO,SAAAC,UAAQA,EAAKM,KAAOpB,EAAOE,aAyCrDsB,CAAiB1B,EAAOyB,GAAUL,QAAQ,SAAAJ,GACtChB,EAAMc,MAAMU,KAAK,CACbP,KAAMD,EAAKC,KACXK,GAAIpB,EAAOE,eAMjBuB,EAAa,SAAC3B,UAAiBA,EAAMG,SAASH,EAAMG,SAASgB,OAAS,GAAGf,UAAY,GAErFM,EAAQ,SAACV,EAAeE,OACpBQ,OACCR,KAAW,CACVE,UAAWuB,EAAW3B,YAI9BA,EAAMG,SAASqB,KAAKd,GAEbA,GCxELkB,EAAQ,SAACC,EAAc3B,OACpB4B,EAAGC,WAAWF,SACT,IAAIvB,wBAAwBuB,0BAGlC7B,EDaa,SAAC6B,UACXG,KAAKC,MAAMH,EAAGI,aAAaL,EAAM,SCd5BI,CAAMJ,OAEb9B,EAAKC,EAAOE,SACP,IAAII,oBAAoBJ,6BAG3BF,GCVXmC,EACKC,MAAM,iCACNC,cAAc,GAEnB,IAAMR,EAAOM,EAAMG,KAAKC,EAAE,GACpBtC,EAAWuC,SAASL,EAAMG,KAAKC,EAAE,IAMvCE,QAAQC,IAJMnC,EACVoC,EAAWd,EAAM5B,GAAWA"}