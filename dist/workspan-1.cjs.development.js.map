{"version":3,"file":"workspan-1.cjs.development.js","sources":["../src/graph.ts","../src/cli/validation.ts","../src/index.ts"],"sourcesContent":["import {Entity, Graph, Link} from \"../interfaces\";\nimport fs from 'fs';\n\nexport const find = (graph: Graph, entityId: number): Entity => {\n    const entity = graph.entities.find(entity => entity.entity_id === entityId);\n\n    if (entity === undefined) {\n        throw new Error(`The entity ${entityId} does not exist.`);\n    }\n\n    return entity;\n};\n\nexport const findInboundLinks = (graph: Graph, entity: Entity): Link[] => {\n    return graph.links.filter(link => link.to === entity.entity_id);\n};\n\nexport const findOutboundLinks = (graph: Graph, entity: Entity): Link[] => {\n    return graph.links.filter(link => link.from === entity.entity_id);\n};\n\nexport const parse = (file: string): Graph => {\n    return JSON.parse(fs.readFileSync(file, 'utf8'));\n};\n\nexport const copy = (graph: &Graph, entityId: number): Graph => {\n    const initial = find(graph, entityId);\n    const initialClone = clone(graph, initial);\n\n    copyInboundLinks(graph, initialClone, initial);\n\n    copyDescendants(graph, initial, initialClone);\n\n    return graph;\n};\n\nconst copyDescendants = (graph: &Graph, entity: Entity, entityClone: Entity): void => {\n    const links = findOutboundLinks(graph, entity);\n\n    if (links.length) {\n        links.forEach(link => {\n            const descendant = find(graph, link.to);\n            const descendantClone = clone(graph, descendant);\n\n            graph.links.push({\n                from: entityClone.entity_id,\n                to: descendantClone.entity_id\n            });\n\n            copyDescendants(graph, descendant, descendantClone);\n        })\n    }\n};\n\nconst copyInboundLinks = (graph: &Graph, entity: Entity, ancestor: Entity) => {\n    findInboundLinks(graph, ancestor).forEach(link => {\n        graph.links.push({\n            from: link.from,\n            to: entity.entity_id\n        });\n    });\n};\n\n// Note: in the production, I'd expect a store/DB call instead of getting the last element from the graph array\nconst generateId = (graph: Graph) => graph.entities[graph.entities.length - 1].entity_id + 1;\n\nconst clone = (graph: &Graph, entity: Entity): Entity => {\n    const clone = {\n        ...entity, ...{\n            entity_id: generateId(graph)\n        }\n    };\n\n    graph.entities.push(clone);\n\n    return clone;\n};\n","import fs from 'fs';\nimport {find, parse} from '../graph';\n\nconst input = (file: string, entity: number) => {\n    if (!fs.existsSync(file)) {\n        throw new Error(`The input file ${file} does not exist.`);\n    }\n\n    let graph = parse(file);\n\n    if (!find(graph, entity)) {\n        throw new Error(`The entity ${entity} does not exist.`);\n    }\n\n    return graph;\n};\n\nexport default input;\n","import yargs from 'yargs';\nimport validation from './cli/validation';\nimport {copy} from './graph';\n\nyargs\n    .usage('Usage: <inputfile> <entityid>')\n    .demandCommand(2);\n\nconst file = yargs.argv._[0];\nconst entityId = parseInt(yargs.argv._[1]);\n\nconst graph = copy(\n    validation(file, entityId), entityId\n);\n\nconsole.log(graph);\n"],"names":["find","graph","entityId","entity","entities","entity_id","undefined","Error","findInboundLinks","links","filter","link","to","findOutboundLinks","from","parse","file","JSON","fs","readFileSync","copy","initial","initialClone","clone","copyInboundLinks","copyDescendants","entityClone","length","forEach","descendant","descendantClone","push","ancestor","generateId","input","existsSync","yargs","usage","demandCommand","argv","_","parseInt","validation","console","log"],"mappings":"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"}